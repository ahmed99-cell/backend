name: BSN Backend API Pipeline

on:
  push:
    branches:
      - main
    #paths:
     # - 'BACKENDQR/**'
     # - 'docker/Backend/**'
      #- 'docker-compose.yml'
      #- 'github/workflows/*-backend.yml'

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw
      - name: Compile project
        run: ./mvnw clean compile


  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sopra-helper
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw
      - name: Running unit tests
        run: ./mvnw clean test



      - name: Archive test reports
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: target/surefire-reports/

  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sopra-helper
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    name: Build backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'
      - name: Grant execute permission for Maven Wrapper
        run: chmod +x mvnw
      - name: Build project
        run: |
          ./mvnw clean package

  build-image:
    runs-on: ubuntu-latest
    name: Build Docker image
    needs: [ build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./mvnw

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "VERSION=${VERSION:-latest}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/bsn-api:${{ env.VERSION }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ env.VERSION }}
  
  
  

  deploy:
    name: Deploy Backend Locally
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker Image
        run: |
          docker compose -f docker-compose.yml build

      - name: Deploy locally
        run: |
          docker compose -f docker-compose.yml up -d
 
  
